---
// src/pages/apps/passwordGen.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
---
<BaseLayout title="Password Generator">
  <div class="password-generator-container">
    <div class="password-generator-header">
      <div class="header-content">
        <h1>Password Generator üîê</h1>
        <p>
          Create strong, secure passwords with customizable options. 
          Generate passwords that are difficult to guess but maybe not that easy to remember.
        </p>
      </div>
      <div class="header-decoration">
        <div class="decoration-item"></div>
        <div class="decoration-item"></div>
        <div class="decoration-item"></div>
      </div>
    </div>
    
    <div class="password-generator-main">
      <div class="password-output-section">
        <div class="password-display">
          <input type="text" id="passwordOutput" readonly placeholder="Generate a password" />
          <button id="copyButton" class="copy-btn" title="Copy to clipboard">
            <i class="fas fa-copy"></i>
          </button>
        </div>
        <div class="password-strength" id="passwordStrength">
          <div class="strength-bar">
            <div class="strength-fill" id="strengthFill"></div>
          </div>
          <span id="strengthText">No password</span>
        </div>
      </div>
      
      <div class="password-options">
        <div class="option-group">
          <label for="passwordLength">Password Length</label>
          <div class="length-control">
            <input type="range" id="passwordLength" min="4" max="50" value="12" />
            <span id="lengthValue">12</span>
          </div>
        </div>
        
        <div class="option-group">
          <label class="checkbox-label">
            <input type="checkbox" id="uppercase" checked />
            <span class="checkmark"></span>
            Uppercase Letters (A-Z)
          </label>
          
          <label class="checkbox-label">
            <input type="checkbox" id="lowercase" checked />
            <span class="checkmark"></span>
            Lowercase Letters (a-z)
          </label>
          
          <label class="checkbox-label">
            <input type="checkbox" id="numbers" checked />
            <span class="checkmark"></span>
            Numbers (0-9)
          </label>
          
          <label class="checkbox-label">
            <input type="checkbox" id="symbols" />
            <span class="checkmark"></span>
            Symbols (!@#$%^&*)
          </label>
        </div>
        
        <div class="option-group">
          <label class="checkbox-label">
            <input type="checkbox" id="excludeSimilar" />
            <span class="checkmark"></span>
            Exclude Similar Characters (0, O, l, 1, etc.)
          </label>
          
          <label class="checkbox-label">
            <input type="checkbox" id="excludeAmbiguous" />
            <span class="checkmark"></span>
            Exclude Ambiguous Characters ({ } [ ] ( ) / \ ' " ` ~ , ; .)
          </label>
        </div>
        
        <div class="generate-section">
          <button id="generateButton" class="generate-btn">
            <i class="fas fa-sync-alt"></i> Generate Password
          </button>
        </div>
      </div>
      
    </div>
    
    <div class="info-section">
      <div class="info-cards">
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-shield-alt"></i>
          </div>
          <h3>Secure & Strong</h3>
          <p>Generate passwords that meet security requirements and are difficult to crack</p>
        </div>
        <div class="info-card">
          <div class="info-icon">
            <i class="fas fa-sliders-h"></i>
          </div>
          <h3>Customizable</h3>
          <p>Customize your password with various options to suit your needs</p>
        </div>
      </div>
    </div>
    
  </div>
  
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // DOM elements
      const passwordOutput = document.getElementById('passwordOutput');
      const copyButton = document.getElementById('copyButton');
      const passwordLength = document.getElementById('passwordLength');
      const lengthValue = document.getElementById('lengthValue');
      const uppercase = document.getElementById('uppercase');
      const lowercase = document.getElementById('lowercase');
      const numbers = document.getElementById('numbers');
      const symbols = document.getElementById('symbols');
      const excludeSimilar = document.getElementById('excludeSimilar');
      const excludeAmbiguous = document.getElementById('excludeAmbiguous');
      const generateButton = document.getElementById('generateButton');
      const generateMultipleButton = document.getElementById('generateMultipleButton');
      const passwordCount = document.getElementById('passwordCount');
      const passwordsList = document.getElementById('passwordsList');
      const strengthFill = document.getElementById('strengthFill');
      const strengthText = document.getElementById('strengthText');
      
      // Character sets
      const charSets = {
        uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        lowercase: 'abcdefghijklmnopqrstuvwxyz',
        numbers: '0123456789',
        symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
      };
      
      // Similar characters
      const similarChars = {
        '0': 'O',
        '1': 'l',
        'I': 'l',
        '5': 'S',
        '$': 'S',
        '8': 'B'
      };
      
      // Ambiguous characters
      const ambiguousChars = '{}[]()/\\\'"`~,;.<>';
      
      // Event listeners
      passwordLength.addEventListener('input', () => {
        lengthValue.textContent = passwordLength.value;
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      uppercase.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      lowercase.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      numbers.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      symbols.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      excludeSimilar.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      excludeAmbiguous.addEventListener('change', () => {
        if (passwordOutput.value) {
          generatePassword();
        }
      });
      
      generateButton.addEventListener('click', generatePassword);
      generateMultipleButton.addEventListener('click', generateMultiplePasswords);
      copyButton.addEventListener('click', copyToClipboard);
      
      // Generate a password on page load
      generatePassword();
      
      // Functions
      function generatePassword() {
        let charset = '';
        
        if (uppercase.checked) charset += charSets.uppercase;
        if (lowercase.checked) charset += charSets.lowercase;
        if (numbers.checked) charset += charSets.numbers;
        if (symbols.checked) charset += charSets.symbols;
        
        // Apply exclusions
        if (excludeSimilar.checked) {
          for (const [char, similar] of Object.entries(similarChars)) {
            charset = charset.replace(new RegExp(char, 'g'), '');
            charset = charset.replace(new RegExp(similar, 'g'), '');
          }
        }
        
        if (excludeAmbiguous.checked) {
          for (const char of ambiguousChars) {
            charset = charset.replace(new RegExp(escapeRegExp(char), 'g'), '');
          }
        }
        
        // Ensure at least one character set is selected
        if (charset === '') {
          passwordOutput.value = '';
          updateStrength(0);
          return;
        }
        
        let password = '';
        const length = parseInt(passwordLength.value);
        
        // Generate password
        for (let i = 0; i < length; i++) {
          password += charset.charAt(Math.floor(Math.random() * charset.length));
        }
        
        passwordOutput.value = password;
        updateStrength(calculateStrength(password));
      }
      
      function generateMultiplePasswords() {
        const count = parseInt(passwordCount.value);
        passwordsList.innerHTML = '';
        
        for (let i = 0; i < count; i++) {
          let charset = '';
          
          if (uppercase.checked) charset += charSets.uppercase;
          if (lowercase.checked) charset += charSets.lowercase;
          if (numbers.checked) charset += charSets.numbers;
          if (symbols.checked) charset += charSets.symbols;
          
          // Apply exclusions
          if (excludeSimilar.checked) {
            for (const [char, similar] of Object.entries(similarChars)) {
              charset = charset.replace(new RegExp(char, 'g'), '');
              charset = charset.replace(new RegExp(similar, 'g'), '');
            }
          }
          
          if (excludeAmbiguous.checked) {
            for (const char of ambiguousChars) {
              charset = charset.replace(new RegExp(escapeRegExp(char), 'g'), '');
            }
          }
          
          // Ensure at least one character set is selected
          if (charset === '') {
            continue;
          }
          
          let password = '';
          const length = parseInt(passwordLength.value);
          
          // Generate password
          for (let j = 0; j < length; j++) {
            password += charset.charAt(Math.floor(Math.random() * charset.length));
          }
          
          // Create password item
          const passwordItem = document.createElement('div');
          passwordItem.className = 'password-item';
          passwordItem.innerHTML = `
            <div class="password-text">${password}</div>
            <button class="copy-small-btn" data-password="${password}">
              <i class="fas fa-copy"></i>
            </button>
          `;
          
          // Add copy functionality
          const copyBtn = passwordItem.querySelector('.copy-small-btn');
          copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(password);
            copyBtn.innerHTML = '<i class="fas fa-check"></i>';
            setTimeout(() => {
              copyBtn.innerHTML = '<i class="fas fa-copy"></i>';
            }, 2000);
          });
          
          passwordsList.appendChild(passwordItem);
        }
      }
      
      function calculateStrength(password) {
        if (password.length === 0) return 0;
        
        let strength = 0;
        
        // Length contributes to strength
        strength += Math.min(password.length * 4, 25);
        
        // Character variety
        const hasUppercase = /[A-Z]/.test(password);
        const hasLowercase = /[a-z]/.test(password);
        const hasNumbers = /[0-9]/.test(password);
        const hasSymbols = /[^A-Za-z0-9]/.test(password);
        
        if (hasUppercase) strength += 10;
        if (hasLowercase) strength += 10;
        if (hasNumbers) strength += 10;
        if (hasSymbols) strength += 15;
        
        // Bonus for using multiple character types
        const typesCount = [hasUppercase, hasLowercase, hasNumbers, hasSymbols].filter(Boolean).length;
        strength += (typesCount - 1) * 5;
        
        // Penalty for repeated characters
        const repeatedChars = password.match(/(.)\1{1,}/g);
        if (repeatedChars) {
          strength -= repeatedChars.length * 2;
        }
        
        // Penalty for common patterns
        if (/(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|012|123|234|345|456|567|678|789)/i.test(password)) {
          strength -= 10;
        }
        
        return Math.min(Math.max(strength, 0), 100);
      }
      
      function updateStrength(strength) {
        strengthFill.style.width = `${strength}%`;
        
        if (strength === 0) {
          strengthFill.style.backgroundColor = '#e0e0e0';
          strengthText.textContent = 'No password';
        } else if (strength < 30) {
          strengthFill.style.backgroundColor = '#f44336';
          strengthText.textContent = 'Weak';
        } else if (strength < 60) {
          strengthFill.style.backgroundColor = '#ff9800';
          strengthText.textContent = 'Medium';
        } else if (strength < 80) {
          strengthFill.style.backgroundColor = '#4caf50';
          strengthText.textContent = 'Strong';
        } else {
          strengthFill.style.backgroundColor = '#2e7d32';
          strengthText.textContent = 'Very Strong';
        }
      }
      
      function copyToClipboard() {
        if (!passwordOutput.value) return;
        
        navigator.clipboard.writeText(passwordOutput.value).then(() => {
          copyButton.innerHTML = '<i class="fas fa-check"></i>';
          setTimeout(() => {
            copyButton.innerHTML = '<i class="fas fa-copy"></i>';
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy: ', err);
        });
      }
      
      function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      }
    });
  </script>
  
  <style>
    :root {
      --primary-color: #637cce;
      --secondary-color: #8da7f0;
      --accent-color: #ff7e67;
      --dark-color: #2c3e50;
      --light-color: #f8f9fa;
      --text-color: #333;
      --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      --hover-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }
    
    .password-generator-container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #f5f7ff 0%, #e8ecff 100%);
      min-height: 100vh;
      border-radius: 20px;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
    }
    
    .password-generator-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 3rem;
      position: relative;
    }
    
    .header-content {
      flex: 2;
    }
    
    .password-generator-header h1 {
      font-size: 3rem;
      color: var(--dark-color);
      margin-bottom: 1rem;
      position: relative;
      display: inline-block;
    }
    
    .password-generator-header h1::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 80px;
      height: 4px;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      border-radius: 2px;
    }
    
    .password-generator-header p {
      color: var(--text-color);
      max-width: 700px;
      margin-top: 1.5rem;
      line-height: 1.6;
    }
    
    .header-decoration {
      flex: 1;
      display: flex;
      justify-content: flex-end;
      align-items: center;
      gap: 15px;
    }
    
    .decoration-item {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      opacity: 0.7;
    }
    
    .decoration-item:nth-child(2) {
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, var(--accent-color), #ff9e80);
    }
    
    .decoration-item:nth-child(3) {
      width: 30px;
      height: 30px;
      background: linear-gradient(135deg, #16a085, #1abc9c);
    }
    
    .password-generator-main {
      background: white;
      border-radius: 16px;
      padding: 2rem;
      box-shadow: var(--card-shadow);
      margin-bottom: 2rem;
    }
    
    .password-output-section {
      margin-bottom: 2rem;
    }
    
    .password-display {
      display: flex;
      margin-bottom: 1rem;
    }
    
    .password-display input {
      flex-grow: 1;
      padding: 1rem;
      border: 2px solid var(--secondary-color);
      border-radius: 8px 0 0 8px;
      font-size: 1.1rem;
      font-family: monospace;
      background: var(--light-color);
      color: var(--dark-color);
    }
    
    .copy-btn {
      padding: 0 1.5rem;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 0 8px 8px 0;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 1.1rem;
    }
    
    .copy-btn:hover {
      background: var(--secondary-color);
    }
    
    .password-strength {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .strength-bar {
      flex-grow: 1;
      height: 8px;
      background: #e0e0e0;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .strength-fill {
      height: 100%;
      width: 0;
      background: #e0e0e0;
      transition: width 0.3s, background-color 0.3s;
    }
    
    .password-options {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    
    .option-group {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .option-group label {
      font-weight: 600;
      color: var(--dark-color);
    }
    
    .length-control {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .length-control input[type="range"] {
      flex-grow: 1;
    }
    
    .length-control span {
      min-width: 30px;
      text-align: center;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
      position: relative;
      padding-left: 30px;
      margin-bottom: 0.75rem;
    }
    
    .checkbox-label input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }
    
    .checkmark {
      position: absolute;
      left: 0;
      height: 20px;
      width: 20px;
      background-color: var(--light-color);
      border: 2px solid var(--secondary-color);
      border-radius: 4px;
      transition: background-color 0.2s, border-color 0.2s;
    }
    
    .checkbox-label:hover input ~ .checkmark {
      border-color: var(--primary-color);
    }
    
    .checkbox-label input:checked ~ .checkmark {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .checkmark:after {
      content: "";
      position: absolute;
      display: none;
      left: 6px;
      top: 2px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }
    
    .checkbox-label input:checked ~ .checkmark:after {
      display: block;
    }
    
    .generate-section {
      grid-column: span 2;
      text-align: center;
    }
    
    .generate-btn {
      padding: 0.75rem 2rem;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 30px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s, transform 0.2s;
      font-size: 1rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .generate-btn:hover {
      background: var(--secondary-color);
      transform: translateY(-2px);
    }
    
    .multiple-passwords {
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid #eee;
    }
    
    .multiple-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .multiple-header h3 {
      font-size: 1.3rem;
      color: var(--dark-color);
    }
    
    .multiple-controls {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .multiple-controls input {
      width: 60px;
      padding: 0.5rem;
      border: 2px solid var(--secondary-color);
      border-radius: 6px;
      text-align: center;
    }
    
    .generate-multiple-btn {
      padding: 0.5rem 1rem;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .generate-multiple-btn:hover {
      background: var(--secondary-color);
    }
    
    .passwords-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
    }
    
    .password-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.75rem;
      background: var(--light-color);
      border-radius: 8px;
      font-family: monospace;
      font-size: 0.9rem;
    }
    
    .password-text {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin-right: 0.5rem;
    }
    
    .copy-small-btn {
      background: transparent;
      border: none;
      color: var(--primary-color);
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      transition: background 0.2s;
    }
    
    .copy-small-btn:hover {
      background: rgba(99, 124, 206, 0.1);
    }
    
    .info-section {
      margin-bottom: 2rem;
    }
    
    .info-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
    
    .info-card {
      background: white;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: var(--card-shadow);
      text-align: center;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .info-card:hover {
      transform: translateY(-5px);
      box-shadow: var(--hover-shadow);
    }
    
    .info-icon {
      font-size: 2.5rem;
      color: var(--primary-color);
      margin-bottom: 1rem;
    }
    
    .info-card h3 {
      font-size: 1.3rem;
      color: var(--dark-color);
      margin-bottom: 0.75rem;
    }
    
    .info-card p {
      color: #666;
      line-height: 1.5;
    }
    
    .back-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: white;
      color: var(--primary-color);
      border-radius: 30px;
      text-decoration: none;
      font-weight: 500;
      transition: background 0.2s, transform 0.2s;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }
    
    .back-btn:hover {
      background: var(--light-color);
      transform: translateY(-2px);
    }
    
    /* Responsive adjustments */
    @media (max-width: 992px) {
      .password-generator-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .header-decoration {
        margin-top: 1rem;
        justify-content: flex-start;
      }
    }
    
    @media (max-width: 768px) {
      .password-generator-container {
        padding: 1.5rem;
      }
      
      .password-generator-header h1 {
        font-size: 2.5rem;
      }
      
      .password-generator-main {
        padding: 1.5rem;
      }
      
      .password-options {
        grid-template-columns: 1fr;
      }
      
      .generate-section {
        grid-column: span 1;
      }
      
      .multiple-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      
      .passwords-list {
        grid-template-columns: 1fr;
      }
      
      .info-cards {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 480px) {
      .password-generator-header h1 {
        font-size: 2rem;
      }
      
      .password-generator-main {
        padding: 1rem;
      }
      
      .password-display {
        flex-direction: column;
      }
      
      .password-display input {
        border-radius: 8px;
        margin-bottom: 0.5rem;
      }
      
      .copy-btn {
        border-radius: 8px;
        width: 100%;
      }
      
      .password-strength {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }
      
      .strength-bar {
        width: 100%;
      }
    }
  </style>
</BaseLayout>